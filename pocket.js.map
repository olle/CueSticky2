{"version":3,"sources":["vector.js","pocket.js"],"names":["neu","a","bi","dot","v1","v2","add","sub","abs","Math","sqrt","mul","v","u","POCKET_RADIUS","x","y","position","vec","radius"],"mappings":";AA0EC,aAnDM,SAASA,EAAIC,EAAGC,GACd,MAAA,CAAED,EAAGA,EAAGC,GAAIA,GASd,SAASC,EAAIC,EAAIC,GACfD,OAAAA,EAAGH,EAAII,EAAGJ,EAAIG,EAAGF,GAAKG,EAAGH,GAS3B,SAASI,EAAIF,EAAIC,GACfL,OAAAA,EAAII,EAAGH,EAAII,EAAGJ,EAAGG,EAAGF,GAAKG,EAAGH,IAS9B,SAASK,EAAIH,EAAIC,GACfL,OAAAA,EAAII,EAAGH,EAAII,EAAGJ,EAAGG,EAAGF,GAAKG,EAAGH,IAQ9B,SAASM,EAAIJ,GACXK,OAAAA,KAAKC,KAAKN,EAAGH,EAAIG,EAAGH,EAAIG,EAAGF,GAAKE,EAAGF,IASrC,SAASS,EAAIC,EAAGC,GACdb,OAAAA,EAAIY,EAAEX,EAAIY,EAAGD,EAAEV,GAAKW,GAC5B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA;;AC9DA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EATD,IAAA,EAAA,EAAA,QAAA,aASC,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,OAAA,yBAAA,EAAA,GAAA,GAAA,EAAA,KAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,EAPD,IAAMC,EAAgB,MAEf,SAASd,EAAIe,EAAGC,GACd,MAAA,CACLC,SAAUC,EAAIlB,IAAIe,EAAGC,GACrBG,OAAQL","file":"pocket.js","sourceRoot":"../src","sourcesContent":["/**\n * A vector (math) implementation. This was the purpose of the original\n * <a href=\"https://github.com/olle/CueSticky\">CueSticky</a> implementation -\n * to explore the use of complex numbers as a representation for vectors in\n * order to express position, direction, movement and intersection detections.\n * \n * @module vector\n */\n\n/**\n * A vector represented as a complex number.\n * \n * @typedef {Object} Vector\n * @property {number} a - the real part\n * @property {number} bi - the imaginary part\n */\n\n/**\n * Creates a new vector object, as pure data.\n * \n * @param {number} a real\n * @param {number} bi imaginary\n */\nexport function neu(a, bi) {\n  return { a: a, bi: bi };\n}\n\n/**\n * Calculates the dot-product of the two given vectors.\n * \n * @param {Vector} v1\n * @param {Vector} v2\n */\nexport function dot(v1, v2) {\n  return v1.a * v2.a + v1.bi * v2.bi;\n}\n\n/**\n * Performs an addition of the two given vectors.\n * \n * @param {Vector} v1 \n * @param {Vector} v2 \n */\nexport function add(v1, v2) {\n  return neu(v1.a + v2.a, v1.bi + v2.bi);\n}\n\n/**\n * Subtracts the two given vectors.\n * \n * @param {Vector} v1 \n * @param {Vector} v2 \n */\nexport function sub(v1, v2) {\n  return neu(v1.a - v2.a, v1.bi - v2.bi);\n}\n\n/**\n * Calculates the absolute-value of the given vector.\n * \n * @param {Vector} v1 \n */\nexport function abs(v1) {\n  return Math.sqrt(v1.a * v1.a + v1.bi * v1.bi);\n}\n\n/**\n * Multiplies the given vector with the provided real number.\n * \n * @param {Vector} v\n * @param {number} u \n */\nexport function mul(v, u) {\n  return neu(v.a * u, v.bi * u);\n}\n","/**\n * A pool table pocket.\n */\nimport * as vec from \"./vector\";\n\nconst POCKET_RADIUS = 0.0485;\n\nexport function neu(x, y) {\n  return {\n    position: vec.neu(x, y),\n    radius: POCKET_RADIUS\n  };\n}\n"]}