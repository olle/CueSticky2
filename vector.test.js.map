{"version":3,"sources":["vector.js","vector.test.js"],"names":["neu","a","bi","dot","v1","v2","add","sub","abs","Math","sqrt","mul","v","u","describe","it","expect","toEqual","x","y"],"mappings":";AA0EC,aAnDM,SAASA,EAAIC,EAAGC,GACd,MAAA,CAAED,EAAGA,EAAGC,GAAIA,GASd,SAASC,EAAIC,EAAIC,GACfD,OAAAA,EAAGH,EAAII,EAAGJ,EAAIG,EAAGF,GAAKG,EAAGH,GAS3B,SAASI,EAAIF,EAAIC,GACfL,OAAAA,EAAII,EAAGH,EAAII,EAAGJ,EAAGG,EAAGF,GAAKG,EAAGH,IAS9B,SAASK,EAAIH,EAAIC,GACfL,OAAAA,EAAII,EAAGH,EAAII,EAAGJ,EAAGG,EAAGF,GAAKG,EAAGH,IAQ9B,SAASM,EAAIJ,GACXK,OAAAA,KAAKC,KAAKN,EAAGH,EAAIG,EAAGH,EAAIG,EAAGF,GAAKE,EAAGF,IASrC,SAASS,EAAIC,EAAGC,GACdb,OAAAA,EAAIY,EAAEX,EAAIY,EAAGD,EAAEV,GAAKW,GAC5B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA;;ACxED,aAFA,IAAA,EAAA,QAAA,YAEAC,SAAS,SAAU,WACjBC,GAAG,kBAAmB,WACpBC,QAAO,EAAI,EAAA,KAAA,EAAG,IAAIC,QAAQ,CAAEhB,EAAG,EAAGC,GAAI,MAGxCa,GAAG,6BAA8B,WAC3BG,IAAAA,GAAI,EAAI,EAAA,KAAA,EAAG,GACXC,GAAI,EAAI,EAAA,KAAA,EAAG,GACfH,QAAO,EAAIE,EAAAA,KAAAA,EAAGC,IAAIF,QAAQ,KAG5BF,GAAG,eAAgB,WACbG,IAAAA,GAAI,EAAI,EAAA,KAAA,EAAG,GACXC,GAAI,EAAI,EAAA,KAAA,EAAG,GACfH,QAAO,EAAIE,EAAAA,KAAAA,EAAGC,IAAIF,QAAQ,CAAEhB,EAAG,EAAGC,GAAI,MAGxCa,GAAG,oBAAqB,WAClBG,IAAAA,GAAI,EAAI,EAAA,KAAA,EAAG,GACXC,GAAI,EAAI,EAAA,KAAA,EAAG,GACfH,QAAO,EAAIE,EAAAA,KAAAA,EAAGC,IAAIF,QAAQ,CAAEhB,GAAI,EAAGC,GAAI,MAGzCa,GAAG,gCAAiC,WAC9BG,IAAAA,GAAI,EAAI,EAAA,KAAA,EAAG,GACfF,QAAO,EAAIE,EAAAA,KAAAA,IAAID,QAAQ,KAGzBF,GAAG,aAAc,WACXG,IAAAA,GAAI,EAAI,EAAA,KAAA,EAAG,GACfF,QAAO,EAAIE,EAAAA,KAAAA,EAAG,IAAID,QAAQ,CAAEhB,EAAG,EAAGC,GAAI","file":"vector.test.js","sourceRoot":"../src","sourcesContent":["/**\n * A vector (math) implementation. This was the purpose of the original\n * <a href=\"https://github.com/olle/CueSticky\">CueSticky</a> implementation -\n * to explore the use of complex numbers as a representation for vectors in\n * order to express position, direction, movement and intersection detections.\n * \n * @module vector\n */\n\n/**\n * A vector represented as a complex number.\n * \n * @typedef {Object} Vector\n * @property {number} a - the real part\n * @property {number} bi - the imaginary part\n */\n\n/**\n * Creates a new vector object, as pure data.\n * \n * @param {number} a real\n * @param {number} bi imaginary\n */\nexport function neu(a, bi) {\n  return { a: a, bi: bi };\n}\n\n/**\n * Calculates the dot-product of the two given vectors.\n * \n * @param {Vector} v1\n * @param {Vector} v2\n */\nexport function dot(v1, v2) {\n  return v1.a * v2.a + v1.bi * v2.bi;\n}\n\n/**\n * Performs an addition of the two given vectors.\n * \n * @param {Vector} v1 \n * @param {Vector} v2 \n */\nexport function add(v1, v2) {\n  return neu(v1.a + v2.a, v1.bi + v2.bi);\n}\n\n/**\n * Subtracts the two given vectors.\n * \n * @param {Vector} v1 \n * @param {Vector} v2 \n */\nexport function sub(v1, v2) {\n  return neu(v1.a - v2.a, v1.bi - v2.bi);\n}\n\n/**\n * Calculates the absolute-value of the given vector.\n * \n * @param {Vector} v1 \n */\nexport function abs(v1) {\n  return Math.sqrt(v1.a * v1.a + v1.bi * v1.bi);\n}\n\n/**\n * Multiplies the given vector with the provided real number.\n * \n * @param {Vector} v\n * @param {number} u \n */\nexport function mul(v, u) {\n  return neu(v.a * u, v.bi * u);\n}\n","import { neu, dot, add, sub, abs, mul } from \"./vector\";\n\ndescribe(\"vector\", () => {\n  it(\"builds a vector\", () => {\n    expect(neu(1, 2)).toEqual({ a: 1, bi: 2 });\n  });\n\n  it(\"calculates the dot product\", () => {\n    let x = neu(1, 2);\n    let y = neu(2, 1);\n    expect(dot(x, y)).toEqual(4);\n  });\n\n  it(\"adds vectors\", () => {\n    let x = neu(1, 2);\n    let y = neu(2, 1);\n    expect(add(x, y)).toEqual({ a: 3, bi: 3 });\n  });\n\n  it(\"subtracts vectors\", () => {\n    let x = neu(1, 2);\n    let y = neu(2, 1);\n    expect(sub(x, y)).toEqual({ a: -1, bi: 1 });\n  });\n\n  it(\"calculates the absolute value\", () => {\n    let x = neu(3, 4);\n    expect(abs(x)).toEqual(5);\n  });\n\n  it(\"multiplies\", () => {\n    let x = neu(3, 4);\n    expect(mul(x, 2)).toEqual({ a: 6, bi: 8 });\n  });\n});\n"]}