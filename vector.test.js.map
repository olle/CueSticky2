{"version":3,"sources":["vector.js","vector.test.js"],"names":["neu","a","bi","dot","v1","v2","add","sub","abs","Math","sqrt","mul","u","describe","it","expect","toEqual","x","y"],"mappings":";AAoBC,aAjBM,SAASA,EAAIC,EAAGC,GACd,MAAA,CAAED,EAAGA,EAAGC,GAAIA,GAEd,SAASC,EAAIC,EAAIC,GACfD,OAAAA,EAAGH,EAAII,EAAGJ,EAAIG,EAAGF,GAAKG,EAAGH,GAE3B,SAASI,EAAIF,EAAIC,GACfL,OAAAA,EAAII,EAAGH,EAAII,EAAGJ,EAAGG,EAAGF,GAAKG,EAAGH,IAE9B,SAASK,EAAIH,EAAIC,GACfL,OAAAA,EAAII,EAAGH,EAAII,EAAGJ,EAAGG,EAAGF,GAAKG,EAAGH,IAE9B,SAASM,EAAIJ,GACXK,OAAAA,KAAKC,KAAKN,EAAGH,EAAIG,EAAGH,EAAIG,EAAGF,GAAKE,EAAGF,IAErC,SAASS,EAAIP,EAAIQ,GACfZ,OAAAA,EAAII,EAAGH,EAAIW,EAAGR,EAAGF,GAAKU,GAC9B,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,IAAA;;AClBD,aAFA,IAAA,EAAA,QAAA,YAEAC,SAAS,SAAU,WACjBC,GAAG,kBAAmB,WACpBC,QAAO,EAAI,EAAA,KAAA,EAAG,IAAIC,QAAQ,CAAEf,EAAG,EAAGC,GAAI,MAGxCY,GAAG,6BAA8B,WAC3BG,IAAAA,GAAI,EAAI,EAAA,KAAA,EAAG,GACXC,GAAI,EAAI,EAAA,KAAA,EAAG,GACfH,QAAO,EAAIE,EAAAA,KAAAA,EAAGC,IAAIF,QAAQ,KAG5BF,GAAG,eAAgB,WACbG,IAAAA,GAAI,EAAI,EAAA,KAAA,EAAG,GACXC,GAAI,EAAI,EAAA,KAAA,EAAG,GACfH,QAAO,EAAIE,EAAAA,KAAAA,EAAGC,IAAIF,QAAQ,CAAEf,EAAG,EAAGC,GAAI,MAGxCY,GAAG,oBAAqB,WAClBG,IAAAA,GAAI,EAAI,EAAA,KAAA,EAAG,GACXC,GAAI,EAAI,EAAA,KAAA,EAAG,GACfH,QAAO,EAAIE,EAAAA,KAAAA,EAAGC,IAAIF,QAAQ,CAAEf,GAAI,EAAGC,GAAI,MAGzCY,GAAG,gCAAiC,WAC9BG,IAAAA,GAAI,EAAI,EAAA,KAAA,EAAG,GACfF,QAAO,EAAIE,EAAAA,KAAAA,IAAID,QAAQ,KAGzBF,GAAG,aAAc,WACXG,IAAAA,GAAI,EAAI,EAAA,KAAA,EAAG,GACfF,QAAO,EAAIE,EAAAA,KAAAA,EAAG,IAAID,QAAQ,CAAEf,EAAG,EAAGC,GAAI","file":"vector.test.js","sourceRoot":"../src","sourcesContent":["/**\n * A vector (math) implementation, bleh!\n */\nexport function neu(a, bi) {\n  return { a: a, bi: bi };\n}\nexport function dot(v1, v2) {\n  return v1.a * v2.a + v1.bi * v2.bi;\n}\nexport function add(v1, v2) {\n  return neu(v1.a + v2.a, v1.bi + v2.bi);\n}\nexport function sub(v1, v2) {\n  return neu(v1.a - v2.a, v1.bi - v2.bi);\n}\nexport function abs(v1) {\n  return Math.sqrt(v1.a * v1.a + v1.bi * v1.bi);\n}\nexport function mul(v1, u) {\n  return neu(v1.a * u, v1.bi * u);\n}\n","import { neu, dot, add, sub, abs, mul } from \"./vector\";\n\ndescribe(\"vector\", () => {\n  it(\"builds a vector\", () => {\n    expect(neu(1, 2)).toEqual({ a: 1, bi: 2 });\n  });\n\n  it(\"calculates the dot product\", () => {\n    let x = neu(1, 2);\n    let y = neu(2, 1);\n    expect(dot(x, y)).toEqual(4);\n  });\n\n  it(\"adds vectors\", () => {\n    let x = neu(1, 2);\n    let y = neu(2, 1);\n    expect(add(x, y)).toEqual({ a: 3, bi: 3 });\n  });\n\n  it(\"subtracts vectors\", () => {\n    let x = neu(1, 2);\n    let y = neu(2, 1);\n    expect(sub(x, y)).toEqual({ a: -1, bi: 1 });\n  });\n\n  it(\"calculates the absolute value\", () => {\n    let x = neu(3, 4);\n    expect(abs(x)).toEqual(5);\n  });\n\n  it(\"multiplies\", () => {\n    let x = neu(3, 4);\n    expect(mul(x, 2)).toEqual({ a: 6, bi: 8 });\n  });\n});\n"]}